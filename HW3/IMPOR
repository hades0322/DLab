module IMPOR(
	output reg [2:0] out,
	output reg out_valid,
	output reg ready,
	input  [2:0] in,
	input  [2:0] mode,
	input  in_valid,
	input  clk,
	input  rst_n
);

parameter IDLE=0, INPUT=1, EX=2, OUTPUT=3;
reg [1:0] now, next;
reg [2:0] p1, p2, p3, p4, p5, p6, p7, p8, p9;
reg [4:0] co1, co2;
reg [3:0] mo;

// state
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) now <= IDLE; 
    else begin
        now <= next;
    end
end

// state change
always@(*) begin
    case (now)
        IDLE:
            if(ready == 1) next = INPUT;
            else next = IDLE;
        INPUT:
            if(co1 >= 8) next = EX;
            else next = INPUT;
        EX:
            if(mo == 0) next = OUTPUT;
            else next = EX;
        OUTPUT:
            if(co2 >= 8) next = IDLE;
            else next = OUTPUT;
        default:
            next = IDLE;
    endcase

end

// counter1
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) co1 <= 0;
    else if(in_valid) co1 <= co1 + 1;
    else if(now != INPUT) co1 <= 0;
    else co1 <= co1;
end

// counter2
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) co2 <= 0;
    else if(now != OUTPUT) co2 <= 0;
    else if(now == OUTPUT) co2 <= co2 + 1;
    else co2 <= co2;
end


// ready
always@(posedge clk or negedge rst_n ) begin
    if(!rst_n) ready <= 0;
    else if(now == IDLE) ready <= 1;
    else if(now == OUTPUT) ready <= 0;
    else ready <= ready;
end

// mo
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) mo <= 8;
    else if(now == EX) mo <= mode;
    else if(now != EX) mo <= 8; 
    else mo <= mo;
end

// p1
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p1 <= 0;  
    else if(in_valid && co1 == 0) p1 <= in;
    else if(now == EX) begin
        case (mo)
            1: p1 <= p3;
            2: p1 <= p7;
            3: p1 <= p3;
            4: p1 <= p7;
            5: p1 <= p1==7 ? 7 : (p1 + 1);
            6: p1 <= p1;
            7: p1 <= p1;
            default: p1 <= p1;
        endcase
    end
    else p1 <= p1;
end

// p2
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p2 <= 0;  
    else if(in_valid && co1 == 1) p2 <= in;
    else if(now == EX) begin
        case (mo)
            1: p2 <= p2;
            2: p2 <= p8;
            3: p2 <= p6;
            4: p2 <= p4;
            5: p2 <= p2;
            6: p2 <= p2==7 ? 7 : (p2 + 1);
            7: p2 <= p2;
            default: p2 <= p2;
        endcase
    end
    else p2 <= p2;
end

// p3
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p3 <= 0;  
    else if(in_valid && co1 == 2) p3 <= in;
    else if(now == EX) begin
        case (mo)
            1: p3 <= p1;
            2: p3 <= p9;
            3: p3 <= p9;
            4: p3 <= p1;
            5: p3 <= p3;
            6: p3 <= p3;
            7: p3 <= p3==7 ? 7 : (p3 + 1);
            default: p3 <= p3;
        endcase
    end
    else p3 <= p3;
end

// p4
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p4 <= 0;  
    else if(in_valid && co1 == 3) p4 <= in;
    else if(now == EX) begin
        case (mo)
            1: p4 <= p6;
            2: p4 <= p4;
            3: p4 <= p2;
            4: p4 <= p8;
            5: p4 <= p4==7 ? 7 : (p4 + 1);
            6: p4 <= p4;
            7: p4 <= p4;
            default: p4 <= p4;
        endcase
    end
    else p4 <= p4;
end

// p5
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p5 <= 0;  
    else if(in_valid && co1 == 4) p5 <= in;
    else if(now == EX) begin
        case (mo)
            1: p5 <= p5;
            2: p5 <= p5;
            3: p5 <= p5;
            4: p5 <= p5;
            5: p5 <= p5;
            6: p5 <= p5==7 ? 7 : (p5 + 1);
            7: p5 <= p5;
            default: p5 <= p5;
        endcase
    end
    else p5 <= p5;
end

// p6
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p6 <= 0;  
    else if(in_valid && co1 == 5) p6 <= in;
    else if(now == EX) begin
        case (mo)
            1: p6 <= p4;
            2: p6 <= p6;
            3: p6 <= p8;
            4: p6 <= p2;
            5: p6 <= p6;
            6: p6 <= p6;
            7: p6 <= p6==7 ? 7 : (p6 + 1);
            default: p6 <= p6;
        endcase
    end
    else p6 <= p6;
end

// p7
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p7 <= 0;  
    else if(in_valid && co1 == 6) p7 <= in;
    else if(now == EX) begin
        case (mo)
            1: p7 <= p9;
            2: p7 <= p1;
            3: p7 <= p1;
            4: p7 <= p9;
            5: p7 <= p7==7 ? 7 : (p7 + 1);
            6: p7 <= p7;
            7: p7 <= p7;
            default: p7 <= p7;
        endcase
    end
    else p7 <= p7;
end

// p8
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p8 <= 0;  
    else if(in_valid && co1 == 7) p8 <= in;
    else if(now == EX) begin
        case (mo)
            1: p8 <= p8;
            2: p8 <= p2;
            3: p8 <= p4;
            4: p8 <= p6;
            5: p8 <= p8;
            6: p8 <= p8==7 ? 7 : (p8 + 1);
            7: p8 <= p8;
            default: p8 <= p8;
        endcase
    end
    else p8 <= p8;
end

// p9
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) p9 <= 0;  
    else if(in_valid && co1 == 8) p9 <= in;
    else if(now == EX) begin
        case (mo)
            1: p9 <= p7;
            2: p9 <= p3;
            3: p9 <= p7;
            4: p9 <= p3;
            5: p9 <= p9;
            6: p9 <= p9;
            7: p9 <= p9==7 ? 7 : (p9 + 1);
            default: p9 <= p9;
        endcase
    end
    else p9 <= p9;
end

// out_vaild
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) out_valid <= 0;
    else if(now != OUTPUT) out_valid <= 0;
    else if(now == OUTPUT) out_valid <= 1;
    else out_valid <= out_valid;
end

// output
always@(posedge clk or negedge rst_n) begin
    if(!rst_n) out <= 0;
    else if(now != OUTPUT) out <= 0;
    else if(now == OUTPUT) begin
        case (co2)
            0: out <= p1;
            1: out <= p2;
            2: out <= p3;
            3: out <= p4;
            4: out <= p5;
            5: out <= p6;
            6: out <= p7;
            7: out <= p8;
            8: out <= p9;
            default: out <= out;
        endcase
    end
    else out <= out;
end

endmodule
